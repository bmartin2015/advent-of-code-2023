<!-- livebook:{"file_entries":[{"name":"day_01.txt","type":"attachment"}]} -->

# Advent of Code 2023: Day 1

```elixir
Mix.install([
  {:kino, "~> 0.11.0"}
])
```

## Setup

Advent of Code 2023 - [Day 1](https://adventofcode.com/2023/day/1)

## Part 1

```elixir
part_1_example = """
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
"""

part_1_example_solution = 142
```

The newly-improved calibration document consists of lines of text; each line originally contained a specific **calibration value** that the Elves now need to recover. On each line, the calibration value can be found by combining the **first digit** and the **last digit** (in that order) to form a single **two-digit number**.

Add thes together to form a single number.

Consider your entire [calibration document](https://adventofcode.com/2023/day/1/input). **What is the sum of all of the calibration values?**

```elixir
regex = ~r/[^\d]/

sum_calibration_values = fn input ->
  input
  |> String.split("\n", trim: true)
  |> Enum.map(fn str ->
    str = String.replace(str, regex, "")

    first = str |> String.first() |> String.to_integer()
    last = str |> String.last() |> String.to_integer()

    "#{first}#{last}" |> String.to_integer()
  end)
  |> Enum.sum()
end
```

```elixir
# Test Example

part_1_example_solution == sum_calibration_values.(part_1_example)
```

```elixir
"day_01.txt"
|> Kino.FS.file_path()
|> File.read!()
|> sum_calibration_values.()
```

## Part 2

```elixir
part_2_example = """
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
"""

part_2_example_solution = 281
```

Your calculation isn't quite right. It looks like some of the digits are actually **spelled out with letters**: one, two, three, four, five, six, seven, eight, and nine **also** count as valid "digits".

**What is the sum of all of the calibration values?**

```elixir
defmodule Part2 do
  def main(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn str ->
      list =
        str
        |> check_word([])
        |> Enum.reverse()

      first = List.first(list)
      last = List.last(list)

      String.to_integer("#{first}#{last}")
    end)
    |> Enum.sum()
  end

  def check_word("", list), do: list
  def check_word("1" <> rest, list), do: check_word(rest, [1 | list])
  def check_word("2" <> rest, list), do: check_word(rest, [2 | list])
  def check_word("3" <> rest, list), do: check_word(rest, [3 | list])
  def check_word("4" <> rest, list), do: check_word(rest, [4 | list])
  def check_word("5" <> rest, list), do: check_word(rest, [5 | list])
  def check_word("6" <> rest, list), do: check_word(rest, [6 | list])
  def check_word("7" <> rest, list), do: check_word(rest, [7 | list])
  def check_word("8" <> rest, list), do: check_word(rest, [8 | list])
  def check_word("9" <> rest, list), do: check_word(rest, [9 | list])
  def check_word("one" <> _rest = word, list), do: next_letter(word, [1 | list])
  def check_word("two" <> _rest = word, list), do: next_letter(word, [2 | list])
  def check_word("three" <> _rest = word, list), do: next_letter(word, [3 | list])
  def check_word("four" <> _rest = word, list), do: next_letter(word, [4 | list])
  def check_word("five" <> _rest = word, list), do: next_letter(word, [5 | list])
  def check_word("six" <> _rest = word, list), do: next_letter(word, [6 | list])
  def check_word("seven" <> _rest = word, list), do: next_letter(word, [7 | list])
  def check_word("eight" <> _rest = word, list), do: next_letter(word, [8 | list])
  def check_word("nine" <> _rest = word, list), do: next_letter(word, [9 | list])
  def check_word(word, list), do: next_letter(word, list)

  def next_letter(<<_::size(8), rest::binary>>, list) do
    check_word(rest, list)
  end
end
```

```elixir
"day_01.txt"
|> Kino.FS.file_path()
|> File.read!()
|> Part2.main()
```
